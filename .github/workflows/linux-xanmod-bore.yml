name: build-linux-xanmod-bore

on:
  workflow_dispatch:
    inputs:
      use_edge:
        type: boolean
        required: false
        description: "Use edge"
      new_kernel_minor_ver:
        type: string
        required: false
        description: "New kernel minor version"
      new_kernel_patch_ver:
        type: string
        required: false
        description: "New kernel patch version"
      new_bore_ver:
        type: string
        required: false
        description: "New BORE version"
jobs:
  build:
    runs-on: ubuntu-latest
#    container: archlinux:latest    
    steps:
      - name: Cleanup
        if: ${{ 'true' == 'false' }}
        run: |
          docker images
          sudo rm -rf "/opt/*" || true
          sudo rm -rf "/usr/share/dotnet" || true
          sudo rm -rf "$AGENT_TOOLSDIRECTORY" || true
          sudo rm -rf "/usr/local/lib/android" || true
          sudo rm -rf "/usr/local/share/boost" || true
          sudo rm -rf "/usr/lib/jvm" || true
          sudo rm -rf "/usr/share/swift" || true
          sudo rm -rf "/usr/local/julia*" || true
          sudo rm -rf "/usr/share/kotlinc" || true
          sudo rm -rf "/usr/local/share/edge_driver" || true
          sudo rm -rf "/usr/local/share/chromedriver-linux64" || true
          sudo rm -rf "/usr/local/share/gecko_driver" || true
          sudo rm -rf "/usr/share/miniconda" || true
          sudo rm -rf "/usr/local/share/phantomjs*" || true
          sudo rm -rf "/usr/share/sbt" || true
          sudo rm -rf "/usr/local/sqlpackage" || true

          sudo npm uninstall bazel
          rustup self uninstall -y
          sudo apt purge \
            ansible \
            apache2 \
            aria2 \
            azure-cli \
            cabal* \
            clang* \
            dotnet-sdk* \
            firefox \
            ghc* \
            google-chrome-stable \
            google-cloud-sdk \
            kubectl \
            libpq-dev \
            microsoft-edge-stable \
            moby-buildx \
            moby-cli \
            moby-compose \
            moby-engine \
            mongodb* \
            mono-complete \
            mysql* \
            nginx \
            node* \
            npm* \
            nuget \
            php* \
            postgresql* \
            powershell \
            r-base \
            rpm \
            ruby* \
            sphinxsearch \
            subversion \
            yarn \
            -yq >/dev/null 2>&1 || true
          sudo apt-get autoremove -y >/dev/null 2>&1 || true
          sudo apt-get autoclean -y >/dev/null 2>&1 || true
          df -h
#          docker rmi $(docker image ls -q --filter "reference=node*")
#          docker rmi $(docker image ls -q --filter "reference=debian*")
#          docker rmi $(docker image ls -q --filter "reference=alpine*")
#          docker rmi $(docker image ls -q --filter "reference=ubuntu:20.04")
      - name: Checkout repo
        uses: actions/checkout@v4 
      - name: Checkount linux-xanmod-bore repo
        uses: actions/checkout@v4
        with: 
          repository: micros24/linux-xanmod-bore
          ref: "6.13"
          path: linux-xanmod-bore
      - name: Apply patches
        run: |
          cd linux-xanmod-bore
          sed -i '/scripts\/config --enable STACK_VALIDATION/a \ \ scripts\/config --set-val CONFIG_X86_64_VERSION 2' PKGBUILD
          BRANCH=$(grep "_sf_branch=" PKGBUILD)
          OLDBRANCH="${BRANCH#_sf_branch=}"
          BRANCH="main"
          if [ "${{ github.event.inputs.use_edge }}" == "true" ]; then
            sed -i 's/_sf_branch=main/_sf_branch=edge/g' PKGBUILD
            BRANCH="edge"
          fi
          PKGVERSION=$(grep "pkgver=" PKGBUILD)
          OLDPATCHVERSION="${PKGVERSION#*"."}"
          MAJOR=$(grep "_major=" PKGBUILD)
          OLDVERSION="${MAJOR#_major=}"
          OLDMINORVERSION="${MAJOR#*.}"
          MINORVERSION=${OLDMINORVERSION}
          echo "MINORVERSION="${MINORVERSION}
          if [ "${{ github.event.inputs.new_kernel_minor_ver }}" != "" ] && [ "${{ github.event.inputs.new_kernel_minor_ver }}" != ${OLDMINORVERSION} ]; then
            MINORVERSION="${{ github.event.inputs.new_kernel_minor_ver }}"
          fi
          if [ ${{ github.event.inputs.new_kernel_minor_ver }} != ${OLDMINORVERSION} ]; then
            curl -LO https://cdn.kernel.org/pub/linux/kernel/v6.x/linux-6.${{ github.event.inputs.new_kernel_minor_ver }}.tar.xz
            export NEW=$(sha256sum linux-6.${{ github.event.inputs.new_kernel_minor_ver }}.tar.xz | awk '{ print $1}')
            curl -LO https://cdn.kernel.org/pub/linux/kernel/v6.x/linux-${OLDVERSION}.tar.xz
            export OLD=$(sha256sum linux-${OLDVERSION}.tar.xz | awk '{ print $1}')
            echo "sed -i 's/${OLD}/${NEW}/g' PKGBUILD" | bash
            echo "sed -i 's/_major=${OLDVERSION}/_major=6.${{ github.event.inputs.new_kernel_minor_ver }}/g' PKGBUILD" | bash
            sed -i "/0002-glitched-cfs.patch/d" PKGBUILD
            sed -i "/0003-glitched-eevdf-additions.patch/d" PKGBUILD
            sed -i 's/_sf_branch=edge/_sf_branch=main/g' PKGBUILD            
            export OLD=$(sha256sum 0004-o3-optimization.patch | awk '{ print $1}')
            curl -L https://github.com/Frogging-Family/linux-tkg/raw/master/linux-tkg-patches/6.${MINORVERSION}/0013-optimize_harder_O3.patch -o 0004-o3-optimization.patch
            export NEW=$(sha256sum 0004-o3-optimization.patch | awk '{ print $1}')
            echo "sed -i 's/${OLD}/${NEW}/g' PKGBUILD" | bash
          fi
          if [ "${{ github.event.inputs.new_bore_ver }}" != "" ]; then
            export OLD=$(sha256sum 0001-bore.patch | awk '{ print $1}')
            curl -L https://raw.githubusercontent.com/firelzrd/bore-scheduler/main/patches/stable/linux-6.${MINORVERSION}-bore/0001-linux6.${MINORVERSION}.y-bore${{ github.event.inputs.new_bore_ver }}.patch -o 0001-bore.patch
            sed -i -e 's/scaling = SCHED_TUNABLESCALING_LOG/scaling = SCHED_TUNABLESCALING_NONE/' ./0001-bore.patch
            export NEW=$(sha256sum 0001-bore.patch | awk '{ print $1}')
            echo "sed -i 's/${OLD}/${NEW}/g' PKGBUILD" | bash
          fi
          if  [ "${{ github.event.inputs.new_kernel_patch_ver }}" != "" ] && [ "${{ github.event.inputs.new_kernel_patch_ver }}" != ${OLDPATCHVERSION} ]; then
            curl -LO https://sourceforge.net/projects/xanmod/files/releases/${BRANCH}/6.${MINORVERSION}.${{ github.event.inputs.new_kernel_patch_ver }}-xanmod1/patch-6.${MINORVERSION}.${{ github.event.inputs.new_kernel_patch_ver }}-xanmod1.xz
            export NEW=$(sha256sum patch-6.${MINORVERSION}.${{ github.event.inputs.new_kernel_patch_ver }}-xanmod1.xz | awk '{ print $1}')
            curl -LO https://sourceforge.net/projects/xanmod/files/releases/${OLDBRANCH}/${OLDVERSION}.${OLDPATCHVERSION}-xanmod1/patch-${OLDVERSION}.${OLDPATCHVERSION}-xanmod1.xz
            export OLD=$(sha256sum patch-${OLDVERSION}.${OLDPATCHVERSION}-xanmod1.xz | awk '{ print $1}')
            echo "sed -i 's/${OLD}/${NEW}/g' PKGBUILD" | bash
            echo "sed -i 's/pkgver=\${_major}."${OLDPATCHVERSION}"/pkgver=\${_major}."${{ github.event.inputs.new_kernel_patch_ver }}"/g' PKGBUILD" | bash
          fi
      - name: Set UserID
        run: |
          echo "USERID=$(id -u $(whoami))" >> $GITHUB_ENV
        env: 
          USERID: ''          
      - name: Build
        uses: docker://archlinux:latest
        with:
          entrypoint: '/bin/sh'
          args: ./gcc-build-bore.sh ${{ env.USERID }} 
      - name: Upload packages
        uses: actions/upload-artifact@v4
        with:
          name: linux-xanmod-bore
          path: ${{ github.workspace }}/linux-xanmod-bore/*.pkg.tar.zst
        
